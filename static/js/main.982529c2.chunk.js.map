{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","index","key","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","fetch","then","response","json","users","setState","monsters_filter","this","filter","toLowerCase","includes","search_field","e","target","value","search","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qTAGaA,G,kBAAO,SAAAC,GAChB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAK,WAAaL,EAAMM,QACpG,wBAAIC,IAAKP,EAAMG,QAAQC,IAAKJ,EAAMG,QAAQK,MAC1C,2BAAIR,EAAMG,QAAQM,UCJjBC,EAAW,SAACV,GACrB,OACI,yBAAKC,UAAU,aACVD,EAAMW,SAASC,KAAI,SAACT,GAAD,OAChB,kBAAC,EAAD,CAAMI,IAAKJ,EAAQC,GAAID,QAASA,SCJnCU,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,6BACI,2BAAOd,UAAU,SAASe,KAAK,SAASC,SAAUF,EAAcD,YAAaA,OC2C1EI,E,kDA3Cb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACX,SAAY,GACZ,aAAgB,IAJP,E,gEAQO,IAAD,OACjBC,MAAM,6CAA6CC,MACjD,SAAAC,GAAQ,OAAIA,EAASC,OAAOF,MAC1B,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAE,SAAYD,Y,+BAKjC,IAAD,OACHE,EAAkBC,KAAKR,MAAMR,SAASiB,QAAO,SAAAzB,GAAO,OAAIA,EAAQK,KAAKqB,cAAcC,SAAS,EAAKX,MAAMY,aAAaF,kBAExH,OACE,yBAAK5B,UAAU,OACb,6CACA,kBAAC,EAAD,CACEa,YAAY,iBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKP,SAAS,CAACM,aAAcC,EAAEC,OAAOC,WAE3D,kBAAC,EAAD,CACEvB,SAAUe,O,iCAMPS,GAAQ,IAAD,OAChBC,QAAQC,IAAIF,GACZ,IAAMT,EAAkBC,KAAKR,MAAMR,SAASiB,QAAO,SAAAzB,GAAO,OAAIA,EAAQK,KAAKqB,cAAcC,SAASK,EAAON,kBACzGF,KAAKF,SAAS,CACZ,aAAgBU,EAChB,gBAAmBT,IAClB,kBAAMU,QAAQC,IAAI,EAAKlB,c,GAzCZmB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.982529c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = props => {\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt={\"monster \" + props.index}/>\r\n            <h2 key={props.monster.id}>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map((monster) => \r\n                <Card key={monster.id} monster={monster}/>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return(\r\n        <div>\r\n            <input className=\"search\" type=\"search\" onChange={handleChange} placeholder={placeholder}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n// e => this.setState({search_field: e.target.value})\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component{\n\n  constructor(){\n    super()\n    this.state = {\n      'monsters': [],\n      'search_field': '',\n    }\n  }\n\n  componentDidMount(){\n    fetch('http://jsonplaceholder.typicode.com/users').then(\n      response => response.json().then(\n        users => this.setState({ 'monsters': users})\n      )\n    )\n  }\n\n  render() {\n    let monsters_filter = this.state.monsters.filter(monster => monster.name.toLowerCase().includes(this.state.search_field.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Inc.</h1>\n        <SearchBox \n          placeholder=\"search monster\" \n          handleChange={e => this.setState({search_field: e.target.value})}\n        />\n        <CardList \n          monsters={monsters_filter} \n        />\n      </div>\n    );\n  }\n\n  changeName(search){\n    console.log(search)\n    const monsters_filter = this.state.monsters.filter(monster => monster.name.toLowerCase().includes(search.toLowerCase()))\n    this.setState({\n      'search_field': search,\n      'monsters_filter': monsters_filter,\n    }, () => console.log(this.state))\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}